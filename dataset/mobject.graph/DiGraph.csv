prompt,code
,"from manim import *

class MovingDiGraph(Scene):
    def construct(self):
        vertices = [1, 2, 3, 4]
        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]

        g = DiGraph(vertices, edges)

        self.add(g)
        self.play(
            g[1].animate.move_to([1, 1, 1]),
            g[2].animate.move_to([-1, 1, 2]),
            g[3].animate.move_to([1, -1, -1]),
            g[4].animate.move_to([-1, -1, 0]),
        )
        self.wait()
"
,"from manim import *

class CustomDiGraph(Scene):
    def construct(self):
        vertices = [i for i in range(5)]
        edges = [
            (0, 1),
            (1, 2),
            (3, 2),
            (3, 4),
        ]

        edge_config = {
            ""stroke_width"": 2,
            ""tip_config"": {
                ""tip_shape"": ArrowSquareTip,
                ""tip_length"": 0.15,
            },
            (3, 4): {
                ""color"": RED,
                ""tip_config"": {""tip_length"": 0.25, ""tip_width"": 0.25}
            },
        }

        g = DiGraph(
            vertices,
            edges,
            labels=True,
            layout=""circular"",
            edge_config=edge_config,
        ).scale(1.4)

        self.play(Create(g))
        self.wait()
"
,"from manim import *

class UndirectedMovingDiGraph(Scene):
    def construct(self):
        vertices = [i for i in range(5)]
        edges = [
            (0, 1),
            (1, 2),
            (3, 2),
            (3, 4),
        ]

        edge_config = {
            ""stroke_width"": 2,
            ""tip_config"": {""tip_length"": 0, ""tip_width"": 0},
            (3, 4): {""color"": RED},
        }

        g = DiGraph(
            vertices,
            edges,
            labels=True,
            layout=""circular"",
            edge_config=edge_config,
        ).scale(1.4)

        self.play(Create(g))
        self.wait()

        self.play(
            g[1].animate.move_to([1, 1, 1]),
            g[2].animate.move_to([-1, 1, 2]),
            g[3].animate.move_to([-1.5, -1.5, -1]),
            g[4].animate.move_to([1, -2, -1]),
        )
        self.wait()
"
