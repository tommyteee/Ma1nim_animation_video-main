prompt,code
,"from manim import *

class MarkupExample(Scene):
    def construct(self):
        text = MarkupText('<span foreground=""blue"" size=""x-large"">Blue text</span> is <i>cool</i>!""')
        self.add(text)
"
,"from manim import *

class MarkupElaborateExample(Scene):
    def construct(self):
        text = MarkupText(
            '<span foreground=""purple"">ا</span><span foreground=""red"">َ</span>'
            'ل<span foreground=""blue"">ْ</span>ع<span foreground=""red"">َ</span>ر'
            '<span foreground=""red"">َ</span>ب<span foreground=""red"">ِ</span>ي'
            '<span foreground=""green"">ّ</span><span foreground=""red"">َ</span>ة'
            '<span foreground=""blue"">ُ</span>'
        )
        self.add(text)
"
,"from manim import *

class BasicMarkupExample(Scene):
    def construct(self):
        text1 = MarkupText(""<b>foo</b> <i>bar</i> <b><i>foobar</i></b>"")
        text2 = MarkupText(""<s>foo</s> <u>bar</u> <big>big</big> <small>small</small>"")
        text3 = MarkupText(""H<sub>2</sub>O and H<sub>3</sub>O<sup>+</sup>"")
        text4 = MarkupText(""type <tt>help</tt> for help"")
        text5 = MarkupText(
            '<span underline=""double"">foo</span> <span underline=""error"">bar</span>'
        )
        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)
        self.add(group)
"
,"from manim import *

class ColorExample(Scene):
    def construct(self):
        text1 = MarkupText(
            f'all in red <span fgcolor=""{YELLOW}"">except this</span>', color=RED
        )
        text2 = MarkupText(""nice gradient"", gradient=(BLUE, GREEN))
        text3 = MarkupText(
            'nice <gradient from=""RED"" to=""YELLOW"">intermediate</gradient> gradient',
            gradient=(BLUE, GREEN),
        )
        text4 = MarkupText(
            'fl ligature <gradient from=""RED"" to=""YELLOW"">causing trouble</gradient> here'
        )
        text5 = MarkupText(
            'fl ligature <gradient from=""RED"" to=""YELLOW"" offset=""1"">defeated</gradient> with offset'
        )
        text6 = MarkupText(
            'fl ligature <gradient from=""RED"" to=""YELLOW"" offset=""1"">floating</gradient> inside'
        )
        text7 = MarkupText(
            'fl ligature <gradient from=""RED"" to=""YELLOW"" offset=""1,1"">floating</gradient> inside'
        )
        group = VGroup(text1, text2, text3, text4, text5, text6, text7).arrange(DOWN)
        self.add(group)
"
,"from manim import *

class UnderlineExample(Scene):
    def construct(self):
        text1 = MarkupText(
            '<span underline=""double"" underline_color=""green"">bla</span>'
        )
        text2 = MarkupText(
            '<span underline=""single"" underline_color=""green"">xxx</span><gradient from=""#ffff00"" to=""RED"">aabb</gradient>y'
        )
        text3 = MarkupText(
            '<span underline=""single"" underline_color=""green"">xxx</span><gradient from=""#ffff00"" to=""RED"" offset=""-1"">aabb</gradient>y'
        )
        text4 = MarkupText(
            '<span underline=""double"" underline_color=""green"">xxx</span><gradient from=""#ffff00"" to=""RED"">aabb</gradient>y'
        )
        text5 = MarkupText(
            '<span underline=""double"" underline_color=""green"">xxx</span><gradient from=""#ffff00"" to=""RED"" offset=""-2"">aabb</gradient>y'
        )
        group = VGroup(text1, text2, text3, text4, text5).arrange(DOWN)
        self.add(group)
"
,"from manim import *

class FontExample(Scene):
    def construct(self):
        text1 = MarkupText(
            'all in sans <span font_family=""serif"">except this</span>', font=""sans""
        )
        text2 = MarkupText(
            '<span font_family=""serif"">mixing</span> <span font_family=""sans"">fonts</span> <span font_family=""monospace"">is ugly</span>'
        )
        text3 = MarkupText(""special char > or &gt;"")
        text4 = MarkupText(""special char &lt; and &amp;"")
        group = VGroup(text1, text2, text3, text4).arrange(DOWN)
        self.add(group)
"
,"from manim import *

class NewlineExample(Scene):
    def construct(self):
        text = MarkupText('foooo<span foreground=""red"">oo\nbaa</span>aar')
        self.add(text)
"
,"from manim import *

class NoLigaturesExample(Scene):
    def construct(self):
        text1 = MarkupText('fl<gradient from=""RED"" to=""GREEN"">oat</gradient>ing')
        text2 = MarkupText('fl<gradient from=""RED"" to=""GREEN"">oat</gradient>ing', disable_ligatures=True)
        group = VGroup(text1, text2).arrange(DOWN)
        self.add(group)
"
,"from manim import *

class MultiLanguage(Scene):
    def construct(self):
        morning = MarkupText(""வணக்கம்"", font=""sans-serif"")
        japanese = MarkupText(
            '<span fgcolor=""blue"">日本</span>へようこそ'
        )  # works as in ``Text``.
        mess = MarkupText(""Multi-Language"", weight=BOLD)
        russ = MarkupText(""Здравствуйте मस नम म "", font=""sans-serif"")
        hin = MarkupText(""नमस्ते"", font=""sans-serif"")
        chinese = MarkupText(""臂猿「黛比」帶著孩子"", font=""sans-serif"")
        group = VGroup(morning, japanese, mess, russ, hin, chinese).arrange(DOWN)
        self.add(group)
"
,"from manim import *

class JustifyText(Scene):
    def construct(self):
        ipsum_text = (
            ""Lorem ipsum dolor sit amet, consectetur adipiscing elit.""
            ""Praesent feugiat metus sit amet iaculis pulvinar. Nulla posuere ""
            ""quam a ex aliquam, eleifend consectetur tellus viverra. Aliquam ""
            ""fermentum interdum justo, nec rutrum elit pretium ac. Nam quis ""
            ""leo pulvinar, dignissim est at, venenatis nisi.""
        )
        justified_text = MarkupText(ipsum_text, justify=True).scale(0.4)
        not_justified_text = MarkupText(ipsum_text, justify=False).scale(0.4)
        just_title = Title(""Justified"")
        njust_title = Title(""Not Justified"")
        self.add(njust_title, not_justified_text)
        self.play(
            FadeOut(not_justified_text),
            FadeIn(justified_text),
            FadeOut(njust_title),
            FadeIn(just_title),
        )
        self.wait(1)
"
